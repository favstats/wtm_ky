---
title: "Spending per Targeting"
description-meta: "How do political parties chase your vote, what do they want to keep hidden, and how much money do they spend on it? In the lead-up to the elections, we monitor political microtargeting."
lang: nl
format:
  html:
    toc: true
    toc-location: right
---


```{r setup, include=FALSE}

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)




# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf, shiny)


source("../utils.R")
source("../party_utils.R")

```




These charts show the groups that political parties target with their advertisements leading up to the elections, according to the latest data. The focus is on Meta's platforms (Facebook and Instagram) because they offer the most detailed targeting options for political advertisements.

How much did the campaigns of political parties spend on different audiences? The charts below show both the total and the expenditures per party.

> Note: Different targeting criteria may overlap, so the outcome may not necessarily add up to 100%.



::: {.panel-tabset}


### `r last30days_string`

::: {.panel-tabset}



#### Total


```{r, fig.width=8, fig.height=5, dpi=300}
coltototal30 <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
        calc_targeting()

gg <- coltototal30 %>%
  filter(perc >= 0.01) %>%
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
    target == "custom_audience" ~ "Custom Audiences",
    target == "countries" ~ "GEOGRAPHY: Entire Country",
    target == "regions" ~ "GEOGRAPHY: Regions",
    target == "lookalike_audience" ~ "Lookalike Audiences",
    target == "interest" ~ "Detailed",
    target == "age" ~ "Age",
    target == "zips" ~ "GEOGRAPHY: Postal Code",
    target == "CITY" ~ "GEOGRAPHY: City",
    target == "language" ~ "Language",
    target == "gender" ~ "Gender",
    target == "COMUNE" ~ "GEOGRAPHY: Municipality",
    target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
    target == "COUNTY" ~ "GEOGRAPHY: Counties",
    str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(perc))


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget spent on targeting method (% of total spend)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this method."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


#### By Party

```{r}
col_each30 <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(party) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1])
    })



library(highcharter)
library(dplyr)

plot_geography <- function(x) {
  # x <- col_each30
  gg <- x %>%
    filter(perc >= 0.5) %>%
    add_count(party, target) %>%
    mutate(target = case_when(
      target == "custom_audience" ~ "Custom Audiences",
      target == "countries" ~ "GEOGRAPHY: Entire Country",
      target == "regions" ~ "GEOGRAPHY: Regions",
      target == "lookalike_audience" ~ "Lookalike Audiences",
      target == "interest" ~ "Detailed",
      target == "age" ~ "Age",
      target == "zips" ~ "GEOGRAPHY: Postal Code",
      target == "CITY" ~ "GEOGRAPHY: City",
      target == "language" ~ "Language",
      target == "gender" ~ "Gender",
      target == "COMUNE" ~ "GEOGRAPHY: Municipality",
      target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
      target == "COUNTY" ~ "GEOGRAPHY: Counties",
      str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
      TRUE ~ target
    )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(n))

  the_order <- gg %>%
    complete(party, target, fill = list(n = 0)) %>%
    mutate(target = fct_reorder(target, n, .desc = FALSE)) %>%
    pull(target) %>%
    levels()



  charts <- gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
    split(.$party) %>%
    map(~ {
             the_color <- color_dat$colors[color_dat$party == .x$party[1]]
      hchart(.x, type = "bar", hcaes(x = target, y = perc), color = the_color) %>%
            hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
            hc_yAxis(title = list(text = "% Party Budget spent on targeting method"), max = 100, min = 0) %>%
            hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
            hc_add_theme(hc_theme_google()) %>%
           highcharter::hc_tooltip(
              pointFormat = paste0("<b>{point.target}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol,           "{point.spend_perlab} on this method."),
              headerFormat = ""
            ) %>%
            hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
        hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
    }
    )

  charts
}

```


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```


:::

### `r last7days_string`


::: {.panel-tabset}


#### Total


```{r, fig.width=8, fig.height=5, dpi=300}
coltototal7 <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
        calc_targeting()

gg <- coltototal7 %>%
  filter(perc >= 0.01) %>%
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
    target == "custom_audience" ~ "Custom Audiences",
    target == "countries" ~ "GEOGRAPHY: Entire Country",
    target == "regions" ~ "GEOGRAPHY: Regions",
    target == "lookalike_audience" ~ "Lookalike Audiences",
    target == "interest" ~ "Detailed",
    target == "age" ~ "Age",
    target == "zips" ~ "GEOGRAPHY: Postal Code",
    target == "CITY" ~ "GEOGRAPHY: City",
    target == "language" ~ "Language",
    target == "gender" ~ "Gender",
    target == "COMUNE" ~ "GEOGRAPHY: Municipality",
    target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
    target == "COUNTY" ~ "GEOGRAPHY: Counties",
    str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(perc))

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget spent on targeting method (% of total spend)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this method."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  ) %>%
    hc_exporting(
      enabled = TRUE
    )

```


#### By Party

```{r, fig.width=12, fig.height=9, dpi=300}

col_each7 <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(party) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1])
    })



```

```{r echo=FALSE, results='asis'}

# Generate plots
plots <- plot_geography(col_each7)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

:::


:::
